{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","objectToDelete","delete","put","PersonForm","props","onSubmit","addPerson","value","newName","onChange","handleNameChange","newNumber","handleNumberChange","type","Filter","filter","handleFilterChange","Persons","persons","person","name","toLowerCase","includes","map","number","onClick","deletePerson","SuccessNotification","message","className","ErrorNotification","App","useState","setPersons","setNewName","setNewNumber","setFilter","successMessage","setSuccessMessage","errorMessage","setErrorMessage","useEffect","personService","initialPersons","updateNumber","window","confirm","changedPerson","returnedPerson","p","catch","error","setTimeout","event","target","preventDefault","some","alert","personObject","find","concat","errorObject","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.da33f2e9.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = 'http://localhost:3001/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => {\r\n        return response.data\r\n    })\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst deleteObject = id => {\r\n    let objectToDelete = axios.get(`${baseUrl}/${id}`)\r\n    return axios.delete(`${baseUrl}/${id}`, objectToDelete)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default {\r\n    getAll: getAll,\r\n    create: create,\r\n    deleteObject: deleteObject,\r\n    update: update\r\n}\r\n","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\nimport './index.css'\n\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [filter, setFilter] = useState('')\n  const [successMessage, setSuccessMessage] = useState('')\n  const [errorMessage, setErrorMessage] = useState('')\n\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n\n  const addPerson = (event) => {\n    event.preventDefault()\n\n    if (persons.some(person => person.name === newName)) {\n      if (newNumber === '') {\n        window.alert(`${newName} is already added to phonebook`)\n      } else {\n        let personObject = persons.find(p => p.name === newName)\n        updateNumber(personObject, newNumber)\n      }\n\n    } else {\n      const personObject = {\n        name: newName,\n        number: newNumber\n      }\n\n      personService\n        .create(personObject)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          setNewName('')\n          setNewNumber('')\n          setSuccessMessage(`Person '${personObject.name}' added`)\n        })\n        .catch(error => {\n          const errorObject = error.response.data\n          setErrorMessage(errorObject.error)\n        })\n    }\n  }\n\n  const deletePerson = (name, id) => {\n    if (window.confirm(`delete ${name}?`)) {\n      personService\n        .deleteObject(id)\n      setSuccessMessage(`Person '${name}' has been deleted. Refresh page in order to see changes `)\n\n    }\n  }\n\n  const updateNumber = (person, number) => {\n    if (window.confirm(`${person.name} is already added to phonebook, replace the old number with a new one?`)) {\n      const changedPerson = { ...person, number: number }\n\n      personService\n        .update(person.id, changedPerson)\n        .then(returnedPerson => {\n          setPersons(persons.map(p => p.id !== person.id ? p : returnedPerson))\n          setNewName('')\n          setNewNumber('')\n          setSuccessMessage(`Number of person '${changedPerson.name}' has been succesfully changed `)\n        })\n        .catch(error => {\n          setErrorMessage(\n            `Person '${person.name}' was already removed from server`\n          )\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n          setPersons(persons.filter(p => p.id !== person.id))\n        })\n    }\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setFilter(event.target.value)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <SuccessNotification message={successMessage} />\n      <ErrorNotification message={errorMessage} />\n      <Filter filter={filter} handleFilterChange={handleFilterChange} />\n      <h3>add a new</h3>\n      <PersonForm addPerson={addPerson} newName={newName} newNumber={newNumber} handleNameChange={handleNameChange} handleNumberChange={handleNumberChange} />\n      <h3>Numbers</h3>\n      <Persons persons={persons} filter={filter} deletePerson={deletePerson} />\n    </div>\n  )\n}\n\nconst PersonForm = (props) => {\n  return (\n    <form onSubmit={props.addPerson}>\n      <div>\n        name: <input\n          value={props.newName}\n          onChange={props.handleNameChange}\n        />\n      </div>\n      <div>\n        number: <input\n          value={props.newNumber}\n          onChange={props.handleNumberChange}\n        />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nconst Filter = (props) => {\n  return (\n    <div>\n      filter shown with <input\n        value={props.filter}\n        onChange={props.handleFilterChange}\n      />\n    </div>\n  )\n}\n\nconst Persons = (props) => {\n  return (\n    <div>\n      {props.persons.filter(person => person.name.toLowerCase().includes(props.filter)).map(person =>\n        <div key={person.id}>\n          <p>{person.name} {person.number}</p>\n          <button onClick={() => props.deletePerson(person.name, person.id)} >delete</button>\n        </div>)}\n    </div>\n  )\n}\n\nconst SuccessNotification = ({ message }) => {\n  if (message === null || message === '') {\n    return null\n  } else {\n    return (\n      <div className='success'>\n        {message}\n      </div>\n    )\n  }\n}\n\nconst ErrorNotification = ({ message }) => {\n  if (message === null || message === '') {\n    return null\n  } else {\n    return (\n      <div className='error'>\n        {message}\n      </div>\n    )\n  }\n}\n\n\nexport default App;","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,  \n  document.getElementById('root')\n);\n"],"sourceRoot":""}